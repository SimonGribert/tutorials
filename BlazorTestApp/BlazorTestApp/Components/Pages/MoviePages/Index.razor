@page "/movies"
@rendermode InteractiveServer
@using BlazorTestApp.Data
@using BlazorTestApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppMoviesContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    @* <form action="/movies" data-enhance data-permanent> *@
    @*     <input type="search" name="titleFilter" /> *@
    @*     <input type="submit" value="Search" /> *@
    @* </form> *@
    <input type="search" @bind="TitleFilter" @bind:event="oninput"/>
</div>

<p>
    <a href="/movies/create">Create New</a>
</p>

<div>
    <QuickGrid Class="table" Items="FilteredMovies" Pagination="_pagination">
        <PropertyColumn Property="movie => movie.Title" Sortable="true"/>
        <PropertyColumn Property="movie => movie.ReleasedDate"/>
        <PropertyColumn Property="movie => movie.Genre"/>
        <PropertyColumn Property="movie => movie.Price"/>
        <PropertyColumn Property="movie => movie.Rating"/>

        <TemplateColumn Context="movie">
            <a href="@($"movies/edit?id={movie.ID}")">Edit</a> |
            <a href="@($"movies/details?id={movie.ID}")">Details</a> |
            <a href="@($"movies/delete?id={movie.ID}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="_pagination"/>

@code {
    private BlazorWebAppMoviesContext _context = null!;

    //[SupplyParameterFromQuery]
    private string? TitleFilter { get; set; } = string.Empty;

    private IQueryable<Movie> FilteredMovies =>
        _context.Movie.Where(m => m.Title!.ToLower().Contains((TitleFilter ?? string.Empty).ToLower()));

    private readonly PaginationState _pagination = new() { ItemsPerPage = 5 };

    protected override void OnInitialized()
    {
        _context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();

}
